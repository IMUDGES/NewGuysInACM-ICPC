\section{函数——结构、参数与返回值}

经过上面几个小结的讲解，我们已经能用以上所学知识完成绝大部分的编程工作。随着我们开发规模的增加，大家就会觉得仅仅使用选择、循环等结构，虽然能实现预期的功能，但是实现的代价将会是非常高的。例如有种“常见”的功能，由很多条语句组成。这个功能可能在程序的各个部分都会被使用到。每次使用它，我们都需要把组成这个功能的一系列语句书写一遍。这样我们的代码虽然实现了多处调用这个功能，但是会产生大量的“冗余\footnote{冗余就是指“重复”的内容，如果后来再这些重复的代码中发现了错误，想要修正就必须要将所有类似的代码都加以修正，所以说冗余会增加大量的工作量。}”

在看过下面的例子之后我们就会了解如何利用“函数”这个全新的概念，来让程序的冗余度减小。

\subsection{Code}
\lstinputlisting[language=C++,caption=函数——结构、参数与返回值,label=code:Function-Structure-Param-ReturnValue]{codes/1-7/1-7.cpp}

\subsection{Analyze}
代码\ref{code:Function-Structure-Param-ReturnValue}主要列举了函数的基本构成，下面是代码的一些注解：
\begin{quote}
\showremarks
\end{quote}

在程序的第6-8行，是“函数声明”部分。所谓函数声明，就是指预先“声明”一个函数，让后续的程序能够调用如同此声明的一个函数。之所以有函数声明，是因为在C++中，函数如同变量等一样，都是需要先定义后使用的。由于我们自己定义的函数在main函数中会被用到，所以在用到之前必须要对这个函数进行“定义”。

函数声明其实包含了函数“无关功能”的部分。在函数声明中，我们需要告诉编译器，这个函数的名字、参数、返回值。名字就是指函数名，命名规则如同变量名一样\footnote{函数名和变量名一样，都是标识符，所以说他们的命名规则一样。}，由字母或者下划线开头，名字中可以出现数字但是不能出现特殊符号\footnote{具体的命名规则大家可以自行查阅“标识符”的相关定义}。参数就是指函数的输入数据。就如同数学中的函数一样，参数是一种“自变量”。参数会被传递进函数进行处理，并且返回一个处理的结果。这个结果数学上称为“因变量”，C++中称为函数返回值。

函数声明的具体格式如下：
\begin{quote}
\begin{lstlisting}
<函数返回值> <函数名>
(
    <参数类型1> <参数名1>,
    <参数类型2> <参数名2>,
    ...
);
\end{lstlisting}
\end{quote}

这里为了展示“函数可以有很多参数”的特性，故意将参数部分换成多行。在我们通常的开发中，尽量将参数写成一行以保证良好的可读性。只有当参数列表太长，才去考虑是否需要换行放置参数。

参数的返回值可以是各种数据类型。包括空类型(void)、基本数据类型(int、float等)、甚至是用户自定义的类型(结构体、类类型等)。在函数声明中，我们只需要表明函数的“结构”就够了，所以参数列表中可以省略掉参数名（留着也没用），保留参数类型（用来表明这个函数的结构）

当函数的返回类型为空类型时，则这个函数中只包含了一组操作，并没有利用输入的参数得到一个返回。例如我们第6行的showInt函数，它只是为了输出一些内容，输出完毕则其功能也就结束了，并没有返回一个有用的结果。而我们定义这种函数，主要是为了“封装一组常用的功能”。例如程序代码的第13-20行是没有使用函数时的代码，在我们使用函数之后，仅用3行(23-25行)就能完成原先复杂的功能。这种封装带来的好处不只有代码量的减少。当我们想把“Hello there！”改成“Hellow here！”，如果不使用函数，我们就需要修改所有调用过它的地方（一共3处）。但如果使用了函数，我们只需要修改“函数实现”中的一部分。使用函数的好处可见一斑。

当返回类型不为空时，则说明这个函数中封装了一组对数据进行处理的方法。当我们调用函数的时候，系统就会利用这组方法处理数据，并且将处理过的结果通过返回值传递出来。这个概念完全等同于数学中的函数。

虽然输入参数可以有多个（多个自变量）。但是最多只能有一个返回值（因变量）。这也等同于数学中的函数。当有参数的函数被调用时，系统会判断传递进入函数的参数。当参数的类型满足某种函数时，就会将参数以“值传递”的方式代入函数之中，并且进行后续的操作。“值传递”就是指将某个数的值直接送入函数。例如调用“showInt(1)”就是最直接的值传递（不需要系统进行任何转换）。或者“int a = 10; showInt(a)”也会触发系统的“值传递”操作，程序在执行到这条语句时会变为“showInt(10)”。

值传递可以在代码中的第“23-25”行看到。同时每次当代码执行到第29行，系统并不是执行“isPrimeNumber(i)”，而是将i此时的值代入函数中，然后再去执行。

从代码的第39行开始，我们称其为“函数实现”。实现的是之前在函数声明中定义的一种结构，用自己的代码来表示这段函数的功能。编写一段“函数实现”非常简单，就是将函数声明最后的分号换成用大括号括起来的复合语句即可。

说到函数，不可不提“return语句”。对于没有返回值（返回类型是void）的函数，return的功能是立刻跳出函数。对于有返回值的函数，在return后面跟上一个表达式，当系统执行到return语句时，就会将这个表达式的值返回，并且跳出函数。

\subsection{Result}
上面代码的运行结果如图：
\\[\intextsep] 
  \begin{minipage}{\textwidth} 
    \centering 
    \includegraphics{codes/1-7/result.png}
    \figcaption{函数——结构、参数与返回值} 
    \label{fig:code-1-7-result} 
  \end{minipage}
\\[\intextsep]
在主函数中的11到25行分别显示了使用函数和不使用函数的代码。显而易见使用了函数之后程序的可读性和冗余度都有了很大的改善。

在程序的第28行到32行显示了“判断质数”函数的使用。函数调用可以作为一个表达式，用来作为if的判断等等情况。

程序的34行显示了一个多参数函数的使用。

综上所述，函数为提升程序的可读性和稳定性提供了一种有力的保障。通过将一些常用的、重复的代码封装进函数，能够尽量减少代码的冗余度。在现代的程序设计方法中，“模块化”开发就是基于函数等方式进行的。将每个细小的功能模块封装成一个可重用的函数，供主程序进行调用，以此来将一个复杂的问题拆解成多个简单的小问题进行处理。

\subsection{Try}
本节内容主要是函数的基本定义和语法，请大家完成下面的题目，以巩固对函数功能的理解。
\begin{description}
	\item[Try 1]编写一个函数用来计算矩形的面基，输入长和宽，返回面积值。自己考虑好参数和返回值的类型。
	\item[Try 2]编写一个比较函数，输入两个数，判断这两个数的大小关系。考虑好这个函数的返回值是什么比较妥当（如何表示大于、小于、等于？），并且仔细测试这个函数的功能。
	\item[Try 3]编写一个函数，用来判断点与圆的关系。输入：圆的x，y，半径，点的x，y（5个参数）。\emph{返回值}表示他们的位置关系（在圆外、圆上、圆内）。请仔细考虑如何利用返回值来表示这几种状态。
	\item[Try 4]编写一个函数，输入ascii码，返回这个ascii码对应的字符。
\end{description}
